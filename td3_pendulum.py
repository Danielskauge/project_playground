# -*- coding: utf-8 -*-
"""td3 - pendulum

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MU637qQjwDNJ3g7L-3HSWb6HMNj3ykYq
"""

import gym
import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt
import cProfile
import profile

tf.config.run_functions_eagerly(True)


problem = "Pendulum-v1"
env = gym.make(problem)

num_states = env.observation_space.shape[0]
print("Size of State Space ->  {}".format(num_states))
num_actions = env.action_space.shape[0]
print("Size of Action Space ->  {}".format(num_actions))

upper_bound = env.action_space.high[0]
lower_bound = env.action_space.low[0]

print("Max Value of Action ->  {}".format(upper_bound))
print("Min Value of Action ->  {}".format(lower_bound))


class OUActionNoise:
    def __init__(self, mean, std_deviation, theta=0.15, dt=1e-2, x_initial=None):
        self.theta = theta
        self.mean = mean
        self.std_dev = std_deviation
        self.dt = dt
        self.x_initial = x_initial
        self.reset()

    def __call__(self):
        # Formula taken from https://www.wikipedia.org/wiki/Ornstein-Uhlenbeck_process.
        x = (
            self.x_prev
            + self.theta * (self.mean - self.x_prev) * self.dt
            + self.std_dev * np.sqrt(self.dt) *
            np.random.normal(size=self.mean.shape)
        )
        # Store x into x_prev
        # Makes next noise dependent on current one
        self.x_prev = x
        return x

    def reset(self):
        if self.x_initial is not None:
            self.x_prev = self.x_initial
        else:
            self.x_prev = np.zeros_like(self.mean)


class Buffer:
    @tf.function
    def __init__(self, buffer_capacity, batch_size):
        # Number of "experiences" to store at max
        self.buffer_capacity = buffer_capacity
        # Num of tuples to train on.
        self.batch_size = batch_size

        # Its tells us num of times record() was called.
        self.buffer_counter = 0

        # Instead of list of tuples as the exp.replay concept go
        # We use different np.arrays for each tuple element
        self.state_buffer = np.zeros((self.buffer_capacity, num_states))
        self.action_buffer = np.zeros((self.buffer_capacity, num_actions))
        self.reward_buffer = np.zeros((self.buffer_capacity, 1))
        self.next_state_buffer = np.zeros((self.buffer_capacity, num_states))

    # Takes (s,a,r,s') obervation tuple as input
    @tf.function
    def record(self, obs_tuple):
        # Set index to zero if buffer_capacity is exceeded,
        # replacing old records
        index = self.buffer_counter % self.buffer_capacity

        self.state_buffer[index] = obs_tuple[0]
        self.action_buffer[index] = obs_tuple[1]
        self.reward_buffer[index] = obs_tuple[2]
        self.next_state_buffer[index] = obs_tuple[3]

        self.buffer_counter += 1

    # Eager execution is turned on by default in TensorFlow 2. Decorating with tf.function allows
    # TensorFlow to build a static graph out of the logic and computations in our function.
    # This provides a large speed up for blocks of code that contain many small TensorFlow operations such as this one.

    @tf.function
    def learn(self):
        # Get sampling range
        record_range = min(self.buffer_counter, self.buffer_capacity)
        # Randomly sample indices
        batch_indices = np.random.choice(record_range, self.batch_size)

        # Convert to tensors
        state_batch = tf.convert_to_tensor(self.state_buffer[batch_indices])
        action_batch = tf.convert_to_tensor(self.action_buffer[batch_indices])
        reward_batch = tf.convert_to_tensor(self.reward_buffer[batch_indices])
        reward_batch = tf.cast(reward_batch, dtype=tf.float32)
        next_state_batch = tf.convert_to_tensor(self.next_state_buffer[batch_indices])
        
        with tf.GradientTape(persistent=True) as tape:

            target_actions = target_actor(next_state_batch, training=True)
            global critic_update_noise
            critic_update_noise = tf.random.normal(target_actions.shape, mean=0, stddev=std_dev_critic_update)
            critic_update_noise = np.clip(critic_update_noise,-noise_clip, noise_clip)
            target_actions = target_actions.numpy()
            target_actions = np.clip(np.add(critic_update_noise, target_actions),lower_bound,upper_bound)
            target_actions = tf.convert_to_tensor(target_actions)

            y = reward_batch + gamma * tf.minimum(
                target_critic_1([next_state_batch, target_actions], training=True),
                target_critic_2([next_state_batch, target_actions], training=True)
            )

            critic_value_1 = critic_model_1(
                [state_batch, action_batch], training=True)
            critic_value_2 = critic_model_2(
                [state_batch, action_batch], training=True)

            critic_loss_1 = tf.math.reduce_mean(
                tf.math.square(y - critic_value_1))
            critic_loss_2 = tf.math.reduce_mean(
                tf.math.square(y - critic_value_2))

        
        critic_grad_1 = tape.gradient(
            critic_loss_1, critic_model_1.trainable_variables)
        critic_grad_2 = tape.gradient(
            critic_loss_2, critic_model_2.trainable_variables)


        critic_optimizer.apply_gradients(
            zip(critic_grad_1, critic_model_1.trainable_variables)
        )
        critic_optimizer.apply_gradients(
            zip(critic_grad_2, critic_model_2.trainable_variables)
        )

        #decide location of this
        del tape

        #fix this
        if update_toggle:

          with tf.GradientTape() as tape:
              actions = actor_model(state_batch, training=True)
              critic_value = critic_model_1(
                  [state_batch, actions], training=True)
              # Used `-value` as we want to maximize the value given
              # by the critic for our actions
              actor_loss = -tf.math.reduce_mean(critic_value)

          actor_grad = tape.gradient(
              actor_loss, actor_model.trainable_variables)
          actor_optimizer.apply_gradients(
              zip(actor_grad, actor_model.trainable_variables)
          )
        


# This update target parameters slowly
# Based on rate `tau`, which is much less than one.
@tf.function
def update_target(target_weights, weights, tau):
    for (a, b) in zip(target_weights, weights):
        a.assign(b * tau + a * (1 - tau))


def get_actor():
    # Initialize weights between -3e-3 and 3-e3
    inputs = layers.Input(shape=(num_states,))
    out = layers.Dense(400, activation="relu")(inputs)
    out = layers.Dense(300, activation="relu")(out)
    outputs = layers.Dense(1, activation="tanh",
                           kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))(out)

    # Our upper bound is 2.0 for Pendulum.
    outputs = outputs * upper_bound
    return tf.keras.Model(inputs, outputs)


def get_critic():
    # State as input
    state_input = layers.Input(shape=(num_states))
    state_out = layers.Dense(16, activation="relu")(state_input)
    state_out = layers.Dense(32, activation="relu")(state_out)

    # Action as input
    action_input = layers.Input(shape=(num_actions))
    action_out = layers.Dense(32, activation="relu")(action_input)

    # Both are passed through seperate layer before concatenating
    concat = layers.Concatenate()([state_out, action_out])

    out = layers.Dense(400, activation="relu")(concat)
    out = layers.Dense(300, activation="relu")(out)
    outputs = layers.Dense(1)(out)

    # Outputs single value for give state-action
    return tf.keras.Model([state_input, action_input], outputs)

def policy(state, noise_object):
    action = tf.squeeze(actor_model(state))
    # Adding noise to action
    action = action.numpy() + noise_object()
    # We make sure action is within bounds
    action = np.clip(action, lower_bound, upper_bound)

    return [np.squeeze(action)]

std_dev_exploration = 0.2
std_dev_critic_update = 0.2


ou_noise_exploration = OUActionNoise(mean=np.zeros(
    1), std_deviation=float(std_dev_critic_update) * np.ones(1))

update_toggle = False
#need to find good bounds
noise_clip = 0.5
# Learning rate for actor-critic models
critic_lr = 0.002
actor_lr = 0.001

total_episodes = 100
# Discount factor for future rewards
gamma = 0.99
# Used to update target networks
tau = 0.005

buffer_size = 50000
batch_size = 64

critic_update_noise = tf.random.normal((64,1), mean=0, stddev=std_dev_critic_update)

critic_optimizer = tf.keras.optimizers.Adam(learning_rate=critic_lr)
actor_optimizer = tf.keras.optimizers.Adam(learning_rate=actor_lr)

actor_model = get_actor()
critic_model_1 = get_critic()
critic_model_2 = get_critic()

target_actor = get_actor()
target_critic_1 = get_critic()
target_critic_2 = get_critic()

# Making the weights equal initially
target_actor.set_weights(actor_model.get_weights())
target_critic_1.set_weights(critic_model_1.get_weights())
target_critic_2.set_weights(critic_model_2.get_weights())

def train():
    # To store reward history of each episode
    ep_reward_list = []
    # To store average reward history of last few episodes
    avg_reward_list = []

    global actor_model
    global critic_model_1
    global critic_model_2
    global target_actor
    global target_critic_1
    global target_critic_2

    actor_model = get_actor()
    critic_model_1 = get_critic()
    critic_model_2 = get_critic()

    target_actor = get_actor()
    target_critic_1 = get_critic()
    target_critic_2 = get_critic()

    buffer = Buffer(buffer_size, batch_size)

    # Takes about 4 min to train
    for ep in range(total_episodes):

        prev_state = env.reset()
        episodic_reward = 0

        while True:
            # Uncomment this to see the Actor in action
            # But not in a python notebook.
            # env.render()

            global update_toggle
            update_toggle = not update_toggle

            tf_prev_state = tf.expand_dims(tf.convert_to_tensor(prev_state), 0)

            action = policy(tf_prev_state, ou_noise_exploration)
            # Recieve state and reward from environment.
            state, reward, done, info = env.step(action)

            buffer.record((prev_state, action, reward, state))
            episodic_reward += reward

            buffer.learn()

            if update_toggle:
                    
                update_target(target_actor.variables, actor_model.variables, tau)
                update_target(target_critic_1.variables, critic_model_1.variables, tau)
                update_target(target_critic_2.variables, critic_model_2.variables, tau)

            # End this episode when `done` is True
            if done:
                break

            prev_state = state

        ep_reward_list.append(episodic_reward)

        # Mean of last 40 episodes
        avg_reward = np.mean(ep_reward_list[-40:])
        print("Episode * {} * Avg Reward is ==> {}".format(ep, avg_reward))
        avg_reward_list.append(avg_reward)

    # Plotting graph
    # Episodes versus Avg. Rewards
    plt.plot(avg_reward_list)
    plt.xlabel("Episode")
    plt.ylabel("Avg. Epsiodic Reward")
    plt.show()

#profile.run('train()')
train()

